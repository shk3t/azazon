apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.app.name }}-database-config
  namespace: {{ .Release.Namespace }}
data:
  postgresql_master.conf: |
    data_directory = '/data/pgdata'
    hba_file = '/config/pg_hba.conf'
    ident_file = '/config/pg_ident.conf'

    port = {{ .Values.db.port }}
    listen_addresses = '*'

    archive_mode = on
    archive_command = 'test ! -f /mnt/server/archive/%f && cp %p /mnt/server/archive/%f'

  postgresql_slave.conf: |
    data_directory = '/data/pgdata'
    hba_file = '/config/pg_hba.conf'
    ident_file = '/config/pg_ident.conf'

    port = {{ .Values.db.port }}
    listen_addresses = '*'

  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    host    all             all             10.244.0.0/16           md5
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            trust
    # IPv6 local connections:
    host    all             all             ::1/128                 trust
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            trust
    host    replication     all             ::1/128                 trust

  setup.sh: |
    if [[ $HOSTNAME == *database*-0 ]]; then
        cp /config/postgresql_master.conf /config/postgresql.conf
    else
        cp /config/postgresql_slave.conf /config/postgresql.conf
    fi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.app.name }}-database-statefulset
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.app.name }}-db
  serviceName: {{ .Values.app.name }}-database-service
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}-db
    spec:
      initContainers:
      - name: init-postgres
        image: postgres:18
        command: [ "bash", "/config/setup.sh" ]
        volumeMounts:
        - name: config
          mountPath: /config
      containers:
      - name: postgres
        image: postgres:18
        args: ["-c", "config_file=/config/postgresql.conf"]
        ports:
        - name: {{ .Values.app.name }}-db-port
          containerPort: {{ .Values.db.port }}
        env:
        - name: PGDATA
          value: "/data/pgdata"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.name }}-database-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.name }}-database-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.name }}-database-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_REPLICA_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.name }}-database-secret
              key: POSTGRES_REPLICA_USER
        - name: POSTGRES_REPLICA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.app.name }}-database-secret
              key: POSTGRES_REPLICA_PASSWORD
        volumeMounts:
        - name: config
          mountPath: /config
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      - name: config
        configMap:
          name: {{ .Values.app.name }}-database-config
          items:
          - key: "postgresql_master.conf"
            path: "postgresql_master.conf"
          - key: "postgresql_slave.conf"
            path: "postgresql_slave.conf"
          - key: "pg_hba.conf"
            path: "pg_hba.conf"
          - key: "setup.sh"
            path: "setup.sh"
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: "standard"
      resources:
        requests:
          storage: 100Mi
